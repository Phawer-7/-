from aiogram import executor
from pymongo.errors import DuplicateKeyError

import config
from manipulationWithName import returnWithoutSmiles
from simple import *
from config import chat_report, release, test
from mongoDB import usersNameExists, createColl, setDefaultNameUser, updateDefaultNameUser, deleteChatTrigger, \
    triggerChatExists
from user_triggersDB import deleteUserTrigger, triggerUserExists
from tools import textWithoutCommand

import chatTriggers
import userTriggers
import gamepoll.gamepoll
import gamepoll.addingList


@dp.message_handler(commands=['setme', 'setMe', 'set_me'], commands_prefix='!/.')
async def setMyDefaultName(message: types.Message):
    msg = message.from_user
    if message.reply_to_message and message.from_user.id == config.creator:
        msg = message.reply_to_message.from_user

    name = textWithoutCommand(message.text)
    if name is None:
        await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/setme [–í–∞—à–µ –∏–º—è]</code> –≥–¥–µ –≤–º–µ—Å—Ç–æ [–í–∞—à–µ –∏–º—è] —Å—Ç–∞–≤–∏—Ç–µ –≤–∞—à '
                             '–Ω–∏–∫–Ω–µ–π–º –∏–ª–∏ –∏–º—è. ', parse_mode='HTML')
        return

    if not usersNameExists(msg.id):
        setDefaultNameUser(user_id=msg.id, name=name,
                           telegram_name=msg.first_name,
                           username=msg.username)
    else:
        updateDefaultNameUser(user_id=msg.id, name=name)
    await message.answer(f'{name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')


@dp.message_handler(commands=['setname', 'set_name'], commands_prefix='!/.')
async def setMyDefaultNameByCoping(message: types.Message):
    if message.reply_to_message and message.from_user.id == config.creator:
        name = message.reply_to_message.from_user.first_name
        msg = message.reply_to_message.from_user
    else:
        name = message.from_user.first_name
        msg = message.from_user

    if not usersNameExists(msg.id):
        setDefaultNameUser(user_id=msg.id, name=name,
                           telegram_name=msg.first_name,
                           username=msg.username)
    else:
        updateDefaultNameUser(user_id=msg.id, name=name)

    await message.answer(f'{name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')


@dp.message_handler(commands=['check'], commands_prefix='!/.')
async def checkHowItWorks(message: types.Message):
    nickname = textWithoutCommand(message.text)
    if not nickname is None:
        ready_nick = returnWithoutSmiles(nickname)
        if ready_nick == 0:
            result = [i for i in nickname if i in normal_char or i in caps_normal_char]
            ready_nick = "".join(result).lstrip()
            if len(ready_nick) == 0:
                ready_nick = nickname
        await message.answer(f"üéª Ä·¥á| {ready_nick} üåÖ")


@dp.message_handler(content_types=['new_chat_members'])
async def addNewChatToColl(msg: types.Message):
    if msg["new_chat_member"]["id"] == test or msg["new_chat_member"]["id"] == release:
        buttons = [
            types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –±–æ—Ç–∞", url="https://t.me/savonarola_chan"),
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=1)
        keyboard.add(buttons[0])
        await msg.answer('–ü—Ä–∏–≤–µ—Ç. –Ø –±–æ—Ç –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —á–∞—Ç–æ–≤. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞ –Ω–æ –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ. '
                         '–ù–æ —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –≥–¥–µ –æ–±—ä—è—Å–Ω—è—é—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∏—à–∫–∏ –±–æ—Ç–∞.', reply_markup=keyboard)
        try:
            createColl(chat_id=msg.chat.id, name=msg.chat.title)

            m = await bot.send_message(chat_id=chat_report, text=f'NEW\ngroup: {msg.chat.title}, id: {msg.chat.id}')
            await bot.pin_chat_message(chat_id=chat_report, message_id=m['message_id'])
        except DuplicateKeyError:
            pass
    elif msg["new_chat_member"]["id"] == creator:
        await msg.answer(f'–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}!‚ö°Ô∏è')


@dp.message_handler(commands=['del', 'delete', 'del_trigger'], is_admin=True, commands_prefix='!/.')
async def deleteTrigger(message: types.Message):
    try:
        trigger_name = message.text.split()[1]
        if not message.chat.type == 'private':
            deleteChatTrigger(chatId=message.chat.id, trigger_name=trigger_name)
            if not triggerChatExists(chatId=message.chat.id, trigger_name=trigger_name):
                await message.answer(f'–¢—Ä–∏–≥–≥–µ—Ä {trigger_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ —Å–ø–∏—Å–∫–µ.')
            else:
                await message.answer(f'–¢—Ä–∏–≥–≥–µ—Ä {trigger_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–∞.')
    except IndexError:
        await message.answer('<code>/del_trigger [–∏–º—è_—Ç—Ä–∏–≥–≥–µ—Ä–∞]</code>', parse_mode='HTML')


@dp.message_handler(commands=['del', 'delete', 'del_trigger'], commands_prefix='!/.')
async def deleteTrigger2(message: types.Message):
    try:
        trigger_name = message.text.split()[1]
        if message.chat.type == 'private':
            deleteUserTrigger(user_id=message.from_user.id, trigger_name=trigger_name)
            if not triggerUserExists(user_id=message.from_user.id, trigger_name=trigger_name):
                await message.answer(f'–¢—Ä–∏–≥–≥–µ—Ä {trigger_name} –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.')
            else:
                await message.answer(f'–¢—Ä–∏–≥–≥–µ—Ä {trigger_name} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.')
    except IndexError:
        await message.answer('<code>/del_trigger [–∏–º—è_—Ç—Ä–∏–≥–≥–µ—Ä–∞]</code>', parse_mode='HTML')


@dp.message_handler(content_types=["text"])
async def PinMafiaList(message: types.Message):
    if message.chat.id == config.command_chat or message.chat.id == -1001829614132:
        if message.text.startswith('–ó–∞–ø–æ–º–Ω–∏ —Å–≤–æ–∏—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤'):
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=message.message_id)
        elif message.text.startswith("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤–æ"):
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    elif message.chat.id == -1001591495273:
        if message.text.startswith('–ó–∞–ø–æ–º–Ω–∏ —Å–≤–æ–∏—Ö —Å–æ—é–∑–Ω–∏–∫–æ–≤'):
            await bot.pin_chat_message(chat_id=message.chat.id, message_id=message.message_id)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
